{
  "handleTrackingData": false,
  "scripts": [
    {
      "id": "b1079a55-5cb9-4678-8e43-0794b36cb9ba",
      "scriptName": "injection_script",
      "script": "function __name_space__(HOSTIP, ORIGIN, SERVER_ADDR, WORKSPACE) {\n    console.log('PROXY');\n\n    function guid() {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()\n    }\n\n    const TAB_ID = guid()\n    const DEFAULT_TIMEOUT = 15000\n    const PING_TIMEOUT = 60 * 1000\n    let isActive = true\n\n    class PageInfo {\n        constructor() {\n            this.hostname = \"\"\n            this.rootDomain = \"\"\n            this.url = \"\"\n            this.tabId = null\n        }\n    }\n    class HttpWorker {\n        constructor() {\n            this.urlObj = {\n                hostname: \"\",\n                rootDomain: \"\",\n                url: \"\"\n            };\n            this.pingTimeout = PING_TIMEOUT\n            this.httpQuery = []\n            this.isQueryInWork = false\n        }\n        doHttp (data, addr = SERVER_ADDR + '/event', method = \"POST\", timeout = DEFAULT_TIMEOUT) {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                xhr.open(method, addr, true);\n                if (method === \"POST\")\n                    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                if (isNaN(timeout))\n                    timeout = DEFAULT_TIMEOUT;\n                xhr.timeout = timeout;\n                xhr.send(data);\n                xhr.addEventListener(\"timeout\", function() {\n                    return reject(\"PROXY timeout error: \")\n                }, false)\n                xhr.addEventListener(\"error\", function(e) {\n                    return reject(\"PROXY error while sending data: \" + addr + \" ::: \" + e)\n                }, false)\n                xhr.addEventListener(\"load\", function() {\n                    return resolve(this.responseText.toString())\n                }, false)\n            });\n        }\n        addInHttpQuery(data) {\n            this.httpQuery.push(data)\n            if(!this.isQueryInWork)\n                this.doQueryHttps()\n        }\n        doQueryHttps() {\n            if (!isActive) {\n                return\n            }\n            this.isQueryInWork = true\n            return this.doHttp(this.httpQuery[0])\n                .then(data => {\n                    this.httpQuery.shift();\n                    if(this.httpQuery.length > 0)\n                        return this.doQueryHttps()\n                    else\n                        this.isQueryInWork = false\n                })\n                .catch(err => {\n                    console.log(\"PROXY error httpQuery: \", err)\n                    this.isQueryInWork = false\n                })\n        }\n    }\n\n    function getRootDomain(hostname) {\n        const rootDomainRE = /([\\w\\d]*\\.\\w{2,4}$)/\n        let rootDomain = window.location.hostname.match(rootDomainRE)\n        return rootDomain ? rootDomain[1] : null\n    }\n\n    function setCurrentHostName() {\n        return new Promise(resolve => {\n            httpWorker.urlObj.url = window.location.href\n            httpWorker.urlObj.rootDomain = getRootDomain(window.location.hostname)\n            httpWorker.urlObj.hostname = window.location.hostname.replace('www.', '')\n            return resolve(httpWorker.urlObj.hostname)\n        })\n    }\n\n    let httpWorker = new HttpWorker();\n    let pageInfo = new PageInfo();\n\n    pageInfo.tabId = TAB_ID\n    pageInfo.macId = HOSTIP\n\n    function pingLoop() {\n        let pingObjects = {\n            type: 'tracking_data',\n            clientip: HOSTIP,\n            name: 'ping_loop',\n            payload: {\n                tabid: TAB_ID,\n                GUID: WORKSPACE,\n                orig: btoa(ORIGIN)\n            }\n        }\n        pingObjects.url = httpWorker.urlObj.url === decodeURI(httpWorker.urlObj.url) ?\n            btoa(encodeURI(httpWorker.urlObj.url)) :\n            btoa(httpWorker.urlObj.url)\n        return httpWorker.addInHttpQuery(JSON.stringify(pingObjects));\n    }\n\n    async function getLogin() {\n        {{LOGIN_SCRIPT}}\n    }\n\n    window.onfocus = function() {\n        tabFocus()\n    }\n\n    function tabFocus() {\n        window.onfocus\n        let tabFocus = {\n            type: 'tracking_data',\n            clientip: HOSTIP,\n            name: 'tab_focus',\n            payload: {\n                tabid: TAB_ID,\n                GUID: WORKSPACE,\n                orig: btoa(ORIGIN)\n            }\n        }\n        fetch(SERVER_ADDR + '/event', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(tabFocus)\n        })\n    }\n\n    function main() {\n        if (!document || !document.body) {\n            main\n        }\n        setCurrentHostName()\n            .then(() => {\n                setInterval(pingLoop, httpWorker.pingTimeout)\n            }).catch(err => {\n            console.log(\"PROXY connection failed: \", err)\n        })\n\n        pageInfo.url = document.location.href\n        pageInfo.hostname = document.location.hostname.replace('www.', '')\n        pageInfo.rootDomain = getRootDomain(pageInfo.hostname)\n\n        pingLoop()\n        getLogin()\n\n    }\n    main()\n}",
      "type": "injection_script",
      "updated": "2024-04-02T14:46:19",
      "active": true,
      "projectId": null,
      "sessionId": null,
      "transactionId": null
    }
  ],
  "blacklist": [],
  "ignoreList": [
    "*.googleads.*",
    "incoming.telemetry.mozilla.org",
    "*.criteo.com",
    "*.adnxs.com",
    "insight.adsrvr.org",
    "*.googlesyndication.com",
    "*.rubiconproject.com",
    "ocsp.digicert.com",
    "push.services.mozilla.com",
    "*.doubleclick.net",
    "*.amazon-adsystem.com",
    "apps.identrust.com",
    "detectportal.firefox.com",
    "*.consensu.org",
    "widgets.outbrain.com",
    "*.optimizely.com",
    "adservice.*",
    "*.services.mozilla.com",
    "snippets.*.mozilla.net",
    "*.google-analytics.com",
    "*.phoenix-widget.com",
    "ads.pubmatic.com",
    "*.moatads.com",
    "google-analytics.com",
    "*.uptolike.*",
    "googleads.*",
    "truvidplayer.com",
    "*.casalemedia.com",
    "*.googleapis.com",
    "*.firefox.com",
    "*.indexww.com",
    "*.demdex.net",
    "*.openx.net",
    "*.bounceexchange.com",
    "*.trustarc.com",
    "tracking-protection.cdn.mozilla.net",
    "cdn.firstimpression.io",
    "*.getsale.io",
    "content-signature*.cdn.mozilla.net"
  ],
  "projects": [
    {
      "id": "00000000-0000-0000-0000-000000000000",
      "name": "Main",
      "scripts": [
        {
          "id": "f34e98c7-266a-4b45-ac03-1c4dad9d1504",
          "scriptName": "chatgpt-login",
          "script": "class ChatGpt {\n    attr auth;\n    attr email;\n\n    def ChatGpt() {\n        this.auth = \"\";\n        this.email = \"\";\n    }\n}\n\n// --------------------------------------------------------------------------------\ndef debug(Salesforce obj) {\n    var m = Map ();\n    m[\"auth\"] = obj.auth;\n    m[\"email\"]     = obj.email;\n    return m;\n}\n\n// --------------------------------------------------------------------------------\ndef initialAccept(HTTPProtocol proto) {\n      if (proto.isRequest()) {\n          var url = proto.url();\n          var accepted = false;\n          if (proto.isGet() && url == \"https://chat.openai.com/backend-api/me\") {\n              accepted = true;\n          }\n          if (proto.isPost() && url == \"https://chat.openai.com/api/auth/signout\") {\n            accepted = true;\n          }\n          if (accepted) {\n                var device_id = proto.valueOfSetCookie(\"oai-did\");\n                if (device_id.hasValue()) {\n                    var did_str = to_string(device_id.getValue());\n                    if (did_str != \"\") {\n                        var obj = ChatGpt();\n                        obj.auth = did_str;\n                        return Accepted(obj, debug);\n                    }\n                }\n          }\n      }\n      return Rejected();\n}\n\ndef accept(HTTPProtocol proto, ChatGpt obj) {\n    var url = proto.url();\n    if (equals(url, \"https://chat.openai.com/backend-api/me\")) {\n        return true;\n    }\n    if (obj.email != \"\" && equals(url, \"https://chat.openai.com/api/auth/signout\")) {\n        return true;\n    }\n    return false;\n}\n\ndef handle(HTTP http, ChatGpt obj) {\n    if (!http.isRequest() && http.code() == 200 ) {\n        var url = http.url();\n        if (url == \"https://chat.openai.com/backend-api/me\") {\n            if (http.isJSON()) {\n                var json = http.asJSON();\n                if (json.exists(\"email\")) {\n                    obj.email = json[\"email\"].asString();\n                    var tester = CookieTester();\n                    tester.requireValue(\"oai-did\", obj.auth);\n                    return LoginFinished(tester, obj.email, obj.auth);\n                }\n            }\n        }\n    } else {\n        if (http.isRequest() && http.url() == \"https://chat.openai.com/api/auth/signout\") {\n            return LogOut(obj.email, obj.auth);\n        }\n    }\n    return NothingDetected();\n}\n\n// --------------------------------------------------------------------------------\n// Register auth addon\n// --------------------------------------------------------------------------------\nAuthAddon(\"ChatGPT\", initialAccept, accept, handle);",
          "type": "auth",
          "updated": "2024-04-03T17:37:12",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": "",
          "transactionId": null
        },
        {
          "id": "13ff7b27-6b55-4f1b-880a-94de4967d1d5",
          "scriptName": "chatgpt",
          "script": "// ====================================================================================\ndef getAuthData(Dynamic_Object obj) {\n    return obj.authData;\n}\n\ndef handleResponse(HTTP http, Dynamic_Object obj) {\n    return CreateFound(obj.builder);\n}\n// ================================================================================\ndef debug_handleContent(obj) {\n    return Map();\n}\n\ndef handleConversation(body, auth) {\n    if (body.exists(\"messages\")) {\n        var messages = body[\"messages\"];\n        if (messages.isArray()) {\n            var obj = Dynamic_Object ();\n            obj.authData = Map();\n            obj.authData[\"oai-did\"] = auth;\n            var rolePath = JSONPointer(\"/author/role\");\n            var builder = TableBuilder(\"content\");\n            builder.addColumn(\"id\");\n            builder.addColumn(\"content_type\");\n            builder.addColumn(\"part_number\");\n            builder.addColumn(\"part\");\n\n            for (elt : messages) {\n                if (elt.exists(rolePath) && elt[rolePath] == \"user\") {\n                        if (elt.exists(\"content\")) {\n                            var id = elt[\"id\"];\n                            var c = elt[\"content\"];\n                            var ct = \"\";\n                            if (c.exists(\"content_type\")) {\n                                ct = c[\"content_type\"].asString();\n                            }\n                            var part_num = 0;\n                            for (p : c[\"parts\"]) {\n                                builder.addJsonCell(id);\n                                builder.addCell(ct);\n                                builder.addCellInt(part_num);\n                                builder.addJsonCell(p);\n                                builder.addRow();\n                                part_num = part_num + 1;\n                            }\n                        }\n                }\n            }\n            builder.addTable(\"attachments\");\n            builder.addColumn(\"message_id\");\n            builder.addColumn(\"name\");\n            builder.addColumn(\"id\");\n            builder.addColumn(\"size\");\n            builder.addColumn(\"mimeType\");\n            var mdPath = JSONPointer(\"/metadata/attachments\");\n            for (elt : messages) {\n                if (elt.exists(rolePath) && elt[rolePath] == \"user\") {\n                    if (elt.exists(mdPath)) {\n                        var atts = elt[mdPath];\n                        for (a : atts) {\n                            builder.addJsonCell(elt[\"id\"]);\n                            builder.addJsonCell(a[\"name\"]);\n                            builder.addJsonCell(a[\"id\"]);\n                            builder.addJsonCell(a[\"size\"]);\n                            builder.addJsonCell(a[\"mimeType\"]);\n                            builder.addRow();\n                        }\n                    }\n                }\n            }\n\n            obj.builder = builder;\n            return AcceptedDataReady(obj, debug_handleContent);\n        }\n    }\n    return Rejected();\n}\n// ================================================================================\ndef handlePutFile(http, fragment) {\n    var builder = TableBuilder(\"files\");\n    builder.addColumn(\"id\");\n    builder.addColumn(\"data\");\n    builder.addCell(fragment);\n    builder.addCellBlob(http.asBLOB());\n    builder.addRow();\n\n    var obj = Dynamic_Object ();\n    obj.authData = Map();\n    obj.builder = builder;\n    return AcceptedDataReady(obj, debug_handleContent);\n}\n// ================================================================================\ndef accept(HTTP http) {\n    if (http.isPost()) {\n        var url = http.url();\n        if (url == \"https://chat.openai.com/backend-api/conversation\") {\n            console.info(\"handle request ${http.isRequest()}\");\n            var response = http.asJSON();\n            var device_id = http.valueOfSetCookie(\"oai-did\");\n            var did_str = \"\";\n            if (device_id.hasValue()) {\n                did_str = device_id.getValue().to_string();\n            }\n            return handleConversation(response, did_str);\n        }\n    }\n    if (http.isPut()) {\n        var url = URLParser(http.url());\n        console.log(\"PATH ${url.getPath()}\");\n        if (url.getHost() == \"files.oaiusercontent.com\" && starts_with(url.getPath(), \"/file-\")) {\n            return handlePutFile(http, url.getPath());\n        }\n    }\n    return Rejected();\n}\n\nApplicationProtocolHandler(\"ChatGPT\", getAuthData, accept, handleResponse);",
          "type": "crud",
          "updated": "2024-04-02T14:48:57",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": "",
          "transactionId": null
        },
        {
          "id": "1e1bd0b7-8aa8-476f-bc45-92e0e53defb7",
          "scriptName": "",
          "script": "window.OLD_QUERY_SELECTOR = Element.prototype.querySelector\nElement.prototype.oldQuerySelector = function (selector) {\n    return window.OLD_QUERY_SELECTOR.call(this, selector)\n}",
          "type": "after_body",
          "updated": "2024-04-02T14:46:21",
          "active": false,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "fc2931a0-db92-4053-930f-dd090a4e6b5d",
          "scriptName": "",
          "script": "window.OLD_QUERY_SELECTOR = Element.prototype.querySelector\nElement.prototype.oldQuerySelector = function (selector) {\n    return window.OLD_QUERY_SELECTOR.call(this, selector)\n}",
          "type": "after_body",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "83b9fe78-9527-42e1-b534-890d1cc30c6a",
          "scriptName": "",
          "script": "Storage.prototype.setItem = new Proxy(Storage.prototype.setItem, {\n    apply(target, thisArg, argumentList) {\n        window.dispatchEvent(new Event ('storage'));\n        return Reflect.apply(target, thisArg, argumentList);\n    }\n})\n\nlet getLoginHandle = false\nlet getLoginIsDone = false\nlet reqGetLoginLimitCount = 0\nlet reqGetLoginLimit = 5\n\nasync function getLogin(localClient)  {\n    const doc = `${document.documentElement.innerHTML}`\n    const reg = doc.match(/\"fwuid.*?(?=,)/gm)[1]\n    if (!reg) return\n\n    getLoginHandle = true\n    const clientService = localClient\n    const userData = '/aura?r=36&ui-global-components-one-userProfileCard.UserProfileCard.getAddAccountUrl=1'\n    const pageUrl = '/lightning/page/home'\n    const contextUser =`{\"mode\":\"PROD\",${reg},\"app\":\"one:one\",\"loaded\":{\"APPLICATION@markup://one:one\":\"4B9HbPnafthtBvE6sQMEzg\"},\"dn\":[],\"globals\":{\"appContextId\":\"06m4J000000yMdhQAE\"},\"uad\":true}`\n    const massagePost = '{\"actions\":[{\"id\":\"1254;a\",\"descriptor\":\"serviceComponent://ui.global.components.one.userSwitcher.UserSwitcherController/ACTION$getSessionVars\",\"callingDescriptor\":\"UNKNOWN\",\"params\":{}}]}'\n    const newToken = window.localStorage.getItem('$AuraClientService.token$one:one')\n    try{\n        const resp = await fetch(ORIGIN + userData, {\n            credentials: \"include\",\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:108.0) Gecko/20100101 Firefox/108.0\",\n                \"Accept\": \"*/*\",\n                \"Accept-Language\": \"ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\",\n                \"X-SFDC-Request-Id\": \"17495000000fc1bb4a\",\n                \"X-SFDC-Page-Cache\": \"d7e0a5af75a54aa0\",\n                \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n                \"Sec-Fetch-Dest\": \"empty\",\n                \"Sec-Fetch-Mode\": \"cors\",\n                \"Sec-Fetch-Site\": \"same-origin\"\n            },\n            \"referrer\": ORIGIN + pageUrl,\n            \"body\": `message=${massagePost}&aura.context=${contextUser}&aura.pageURI=${pageUrl}&aura.token=${clientService}`,\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        })\n        try {\n            response = await resp.json()\n            console.log(response)\n            getLoginIsDone = true\n            getLoginHandle = false\n        } catch(e) {\n            reqGetLoginLimitCount++\n            if (reqGetLoginLimitCount === reqGetLoginLimit) {\n                throw new Error('PROXY stack request limit reach', e)\n                return\n            }\n            getLogin(newToken)\n            return\n        }\n    }\n    catch(e) {\n        console.log('PROXY get login: ', e);\n    }\n    return userEvents();\n}\n\nfunction userEvents() {\n\n    const browserId = ('; '+document.cookie).split(`; BrowserId=`).pop().split(';')[0];\n    const browserId_sec = ('; '+document.cookie).split(`; BrowserId_sec=`).pop().split(';')[0];\n    const sid = ('; '+document.cookie).split(`; sid=`).pop().split(';')[0];\n    const sid_Client = ('; '+document.cookie).split(`; sid_Client=`).pop().split(';')[0];\n\n    let userEvents = {\n        type: 'auth-data',\n        clientip: HOSTIP,\n        name: 'login',\n        system: 'salesforce',\n        tabid: TAB_ID,\n        payload: {\n            userFullName: response.actions[0].returnValue.username,\n            userEmail: response.actions[0].returnValue.username,\n            material:\n                {\n                    \"browserId\": `${browserId}`,\n                    \"browserId_sec\": `${browserId_sec}`,\n                    \"sid\": `${sid}`,\n                    \"sid_Client\": `${sid_Client}`,\n                }\n        }\n    }\n    fetch(SERVER_ADDR + '/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userEvents)\n    })\n}\n\nasync function logOutUser() {\n    let logOutUser = {\n        name: 'log-out',\n        clientip: HOSTIP,\n        tabid: TAB_ID,\n        system: 'salesforce'\n    }\n    await fetch(SERVER_ADDR + '/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(logOutUser)\n    })\n}\nwindow.addEventListener('click', evt => {\n    if (evt.target?.textContent === 'Log Out' && evt.target?.href?.includes('logout')) {\n        logOutUser()\n    }\n})\n\nwindow.addEventListener('storage', async () => {\n    const clientService = window.localStorage.getItem('$AuraClientService.token$one:one')\n    const url = ORIGIN\n    const result = url.indexOf('.') > -1\n    if (clientService && !getLoginIsDone && !getLoginHandle && result) {\n        await getLogin(clientService)\n    }\n}, false)",
          "type": "login_handler",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "34cd983c-f644-4078-840e-2ace30155214",
          "scriptName": "*.force.com",
          "script": "global DELETE_RECORD_API = \"serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$deleteRecord\";\nglobal GET_ITEMS_API = \"serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\";\nglobal CREATE_API = \"aura://RecordUiController/ACTION$createRecord\";\nglobal UPDATE_API = \"aura://RecordUiController/ACTION$updateRecord\";\n\ndef getTableName(string pageURI) {\n    var prefix = \"/o/\";\n    var pos1 = find(pageURI, prefix);\n    if (pos1 > pageURI.size()) {\n        prefix=\"/r/\";\n        pos1 = find(pageURI, prefix);\n        if (pos1 > pageURI.size()) {\n            return \"\";\n        }\n    }\n    var temp = substring(pageURI, pos1 + prefix.size(), -1);\n    var pos2 = find_first_of(temp, \"/\");\n    var tableName = trim(substring(temp, 0, pos2));\n    return tableName;\n}\n// ====================================================================================\ndef createResp(id, endpoint, tableName, authData) {\n    var obj = Dynamic_Object ();\n    obj.id = id;\n    obj.endpoint = endpoint;\n    obj.tableName = tableName;\n    obj.authData = authData;\n    return obj;\n}\n// ====================================================================================\ndef debug_handleGetItems(obj) {\n    var m = Map();\n    m[\"id\"] = obj.id;\n    m[\"endpoint\"] = obj.endpoint;\n    m[\"tableName\"] = obj.tableName;\n    return m;\n}\ndef handleGetItems(tableName, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n    if (!obj.exists(\"params\")) {\n        return Rejected();\n    }\n    var params = obj[\"params\"];\n    if (!params.exists(\"entityName\")) {\n        return Rejected();\n    }\n    var entity = params[\"entityName\"];\n    var id = obj[\"id\"];\n    if (id.isString() && entity.isString()) {\n        var obj = createResp(id.asString(), GET_ITEMS_API, entity.asString(), authData);\n        return Accepted(obj, debug_handleGetItems);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef debug_handleDeleteRecord(obj) {\n    var m = debug_handleGetItems(obj);\n    m[\"recordId\"] = obj.recordId;\n    return m;\n}\ndef handleDeleteRecord(tableName, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n    if (!obj.exists(\"params\")) {\n        return Rejected();\n    }\n    var params = obj[\"params\"];\n    if (!params.exists(\"recordId\")) {\n        return Rejected();\n    }\n    var recordId = params[\"recordId\"];\n    var id = obj[\"id\"];\n    if (id.isString()) {\n        var obj = createResp(id.asString(), DELETE_RECORD_API, tableName, authData);\n        obj.recordId = recordId;\n        return Accepted(obj, debug_handleDeleteRecord);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef debug_handleCreateOrUpdateRecord(obj) {\n    var m = debug_handleGetItems(obj);\n    m[\"fields\"] = obj.fields;\n    return m;\n}\ndef handleCreateOrUpdateRecord(tableName, api, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n\n\n    var id = obj[\"id\"];\n    var params = obj[\"params\"];\n\n\n    if (id.isString()) {\n        var obj = createResp(id.asString(), api, tableName, authData);\n        obj.fields = params[\"recordInput\"][\"fields\"].to_string();\n\n        return Accepted(obj, debug_handleCreateOrUpdateRecord);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef accept(HTTP http) {\n    if (http.isPost() && http.hasBody()) {\n        var url = http.url();\n        if (wildcard_match(\"*force.com/aura?*\", url)) {\n            var pageURI = http.findInBodyQuery(\"aura.pageURI\");\n            if (!pageURI.hasValue()) {\n                return Rejected();\n            }\n            var tableName = getTableName(pageURI.getValue().to_string());\n            var message = http.findInBodyQuery(\"message\");\n            if (message.hasValue()) {\n                var obj = parseJson(message.getValue().to_string());\n                if (obj.exists(\"actions\")) {\n                    var actions = obj[\"actions\"];\n                    if (actions.isArray()) {\n                        var n = actions.size();\n                        var authData = Map();\n                        authData[\"browserId\"]     = http.valueOfSetCookie(\"BrowserId\");\n                        authData[\"browserId_sec\"] = http.valueOfSetCookie(\"BrowserId_sec\");\n                        authData[\"sid\"]           = http.valueOfSetCookie(\"sid\");\n                        authData[\"sid_Client\"]    = http.valueOfSetCookie(\"sid_Client\");\n\n                        for (elt : actions) {\n                            if (elt.exists(\"descriptor\")) {\n                                var descriptor = elt[\"descriptor\"].asString();\n                                switch (descriptor) {\n                                    case (DELETE_RECORD_API) {\n                                        return handleDeleteRecord(tableName, elt, authData);\n                                    }\n                                    case (GET_ITEMS_API) {\n                                        return handleGetItems(tableName, elt, authData);\n                                    }\n                                    case (CREATE_API) {\n                                        return handleCreateOrUpdateRecord(tableName, CREATE_API, elt, authData);\n                                    }\n                                    case (UPDATE_API) {\n                                        return handleCreateOrUpdateRecord(tableName, UPDATE_API, elt, authData);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef parseColumnDefs(ParsedJSON fields, TableBuilder builder) {\n    var res = Vector();\n    for (jf : fields) {\n        if (jf.isString()) {\n            var f = jf.asString();\n            builder.addColumn(f);\n            var pos1 = find(f, \".\");\n            if (pos1 > f.size()) {\n                res.push_back([f]);\n            } else {\n                res.push_back(\n                    [f, substring(f, 0, pos1), substring(f, pos1+1, f.size())];\n                );\n            }\n        }\n    }\n    return res;\n}\n// ====================================================================================\ndef extractData(ParsedJSON obj, Vector column) {\n    var primary;\n    if (column.size() == 1) {\n        primary = obj[column[0]];\n    } else {\n        primary = obj[column[1]][\"value\"][\"fields\"][column[2]];\n    }\n    return primary[\"value\"];\n}\n// ====================================================================================\ndef parseGetItems(string tableName, ParsedJSON action, ParsedJSON response) {\n    if (!action.exists(\"returnValue\")) {\n        return NothingFound();\n    }\n    if (!action[\"returnValue\"].exists(\"recordIdActionsList\")) {\n        return NothingFound();\n    }\n    if (!action[\"returnValue\"].exists(\"fields\")) {\n        return NothingFound();\n    }\n    var fields = action[\"returnValue\"][\"fields\"];\n\n    if (!fields.isArray()) {\n        return NothingFound();\n    }\n\n\n    var ids = action[\"returnValue\"][\"recordIdActionsList\"];\n    if (!ids.isArray()) {\n        return NothingFound();\n    }\n\n    if (!response.exists(\"context\")) {\n        return NothingFound();\n    }\n    if (!response[\"context\"].exists(\"globalValueProviders\")) {\n        return NothingFound();\n    }\n    var ctx = response[\"context\"][\"globalValueProviders\"];\n    if (!ctx.isArray()) {\n        return NothingFound();\n    }\n\n    var builder  = TableBuilder(tableName);\n    var columnDefs = parseColumnDefs(fields, builder);\n    var found = 0;\n    for (c : ctx) {\n        if (c.exists(\"type\") && c[\"type\"].isString() && c[\"type\"].asString() == \"$Record\") {\n           if (c.exists(\"values\") && c[\"values\"].exists(\"records\")) {\n               var records = c[\"values\"][\"records\"];\n               if (records.isObject()) {\n                    for (rn : ids) {\n                        var key = rn[\"recordId\"].asString();\n                        if (records.exists(key) && records[key].exists(tableName)) {\n                            var dataObj = records[key][tableName][\"record\"][\"fields\"];\n                            for (col : columnDefs) {\n                                var colName = col[0];\n                                var data = extractData(dataObj, col);\n                                if (!data.isNull()) {\n                                    builder.addCell(data.asString());\n                                } else {\n                                    builder.ommit();\n                                }\n                                found = 1;\n                            }\n                            builder.addRow();\n                        }\n                    }\n               }\n           }\n        }\n    }\n    if (found == 0) {\n        return NothingFound();\n    }\n    return RetrieveFound(builder);\n}\n// ====================================================================================\ndef parseCreateOrUpdateRecord(string tableName, ParsedJSON action, ParsedJSON fields, isCreate) {\n    if (!action.exists(\"returnValue\")) {\n        return NothingFound();\n    }\n\n    var rfields = action[\"returnValue\"];\n\n    var hasId = rfields.exists(\"id\");\n\n    var builder  = TableBuilder(tableName);\n    var data = Vector();\n\n    for (e : fields.items()) {\n        var k = e.key();\n\n        builder.addColumn(k);\n        data.push_back(e.value());\n    }\n\n    if (hasId) {\n        builder.addColumn(\"internal:Id\");\n    }\n\n    for (v : data) {\n        builder.addJsonCell(v);\n    }\n\n    if (hasId) {\n        builder.addCell(rfields[\"id\"].asString());\n    }\n    builder.addRow();\n    if (isCreate == 1) {\n        return CreateFound(builder);\n    }\n    return UpdateFound(builder);\n}\n// ====================================================================================\ndef handleResponse(HTTP http, Dynamic_Object obj) {\n    if (http.hasBody() && http.isJSON()) {\n        var id = obj.id;\n        var response = http.asJSON();\n        if (response.exists(\"actions\")) {\n            var actions = response[\"actions\"];\n            for (act : actions) {\n                if (act.exists(\"id\")) {\n                   var act_id = act[\"id\"];\n                   if (act_id.isString() && (act_id.asString() == id)) {\n                       if (act.exists(\"state\")) {\n                           var state = act[\"state\"];\n                           if (state.isString() && state.asString() != \"SUCCESS\") {\n\n                                return NothingFound();\n                           }\n                           switch (obj.endpoint) {\n                               case (DELETE_RECORD_API) {\n                                    if (obj.recordId.isString()) {\n                                        return DeleteFound(obj.tableName, obj.recordId.asString());\n                                    }\n                               }\n                               case (GET_ITEMS_API) {\n                                    return parseGetItems(obj.tableName, act, response);\n                               }\n                               case (CREATE_API) {\n                                  return parseCreateOrUpdateRecord(obj.tableName, act, parseJson(obj.fields), 1);\n                               }\n                               case (UPDATE_API) {\n                                  return parseCreateOrUpdateRecord(obj.tableName, act, parseJson(obj.fields), 0);\n                               }\n                           }\n                       }\n                   }\n                }\n            }\n        }\n    }\n    return NothingFound();\n}\n// ====================================================================================\ndef getAuthData(Dynamic_Object obj) {\n    return obj.authData;\n}\n\n// ====================================================================================\nApplicationProtocolHandler(\"salesforce\", getAuthData, accept, handleResponse);",
          "type": "crud",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "ca53db40-f223-43ce-bb4d-4556f9868b37",
          "scriptName": "",
          "script": "Storage.prototype.setItem = new Proxy(Storage.prototype.setItem, {\n    apply(target, thisArg, argumentList) {\n        window.dispatchEvent(new Event ('storage'));\n        return Reflect.apply(target, thisArg, argumentList);\n    }\n})\n\nlet getLoginHandle = false\nlet getLoginIsDone = false\nlet reqGetLoginLimitCount = 0\nlet reqGetLoginLimit = 5\n\nasync function getLogin(localClient)  {\n    const doc = `${document.documentElement.innerHTML}`\n    const reg = doc.match(/\"fwuid.*?(?=,)/gm)[1]\n    if (!reg) return\n\n    getLoginHandle = true\n    const clientService = localClient\n    const userData = '/aura?r=36&ui-global-components-one-userProfileCard.UserProfileCard.getAddAccountUrl=1'\n    const pageUrl = '/lightning/page/home'\n    const contextUser =`{\"mode\":\"PROD\",${reg},\"app\":\"one:one\",\"loaded\":{\"APPLICATION@markup://one:one\":\"4B9HbPnafthtBvE6sQMEzg\"},\"dn\":[],\"globals\":{\"appContextId\":\"06m4J000000yMdhQAE\"},\"uad\":true}`\n    const massagePost = '{\"actions\":[{\"id\":\"1254;a\",\"descriptor\":\"serviceComponent://ui.global.components.one.userSwitcher.UserSwitcherController/ACTION$getSessionVars\",\"callingDescriptor\":\"UNKNOWN\",\"params\":{}}]}'\n    const newToken = window.localStorage.getItem('$AuraClientService.token$one:one')\n    try{\n        const resp = await fetch(ORIGIN + userData, {\n            credentials: \"include\",\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:108.0) Gecko/20100101 Firefox/108.0\",\n                \"Accept\": \"*/*\",\n                \"Accept-Language\": \"ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\",\n                \"X-SFDC-Request-Id\": \"17495000000fc1bb4a\",\n                \"X-SFDC-Page-Cache\": \"d7e0a5af75a54aa0\",\n                \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n                \"Sec-Fetch-Dest\": \"empty\",\n                \"Sec-Fetch-Mode\": \"cors\",\n                \"Sec-Fetch-Site\": \"same-origin\"\n            },\n            \"referrer\": ORIGIN + pageUrl,\n            \"body\": `message=${massagePost}&aura.context=${contextUser}&aura.pageURI=${pageUrl}&aura.token=${clientService}`,\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        })\n        try {\n            response = await resp.json()\n            console.log(response)\n            getLoginIsDone = true\n            getLoginHandle = false\n        } catch(e) {\n            reqGetLoginLimitCount++\n            if (reqGetLoginLimitCount === reqGetLoginLimit) {\n                throw new Error('stack request limit reach', e)\n                return\n            }\n            getLogin(newToken)\n            return\n        }\n    }\n    catch(e) {\n        console.log('get login: ', e);\n    }\n    return userEvents();\n}\n\nfunction userEvents() {\n\n    const browserId = ('; '+document.cookie).split(`; BrowserId=`).pop().split(';')[0];\n    const browserId_sec = ('; '+document.cookie).split(`; BrowserId_sec=`).pop().split(';')[0];\n    const sid = ('; '+document.cookie).split(`; sid=`).pop().split(';')[0];\n    const sid_Client = ('; '+document.cookie).split(`; sid_Client=`).pop().split(';')[0];\n\n    let userEvents = {\n        type: 'auth-data',\n        clientip: HOSTIP,\n        name: 'login',\n        system: 'salesforce',\n        tabid: TAB_ID,\n        payload: {\n            userFullName: response.actions[0].returnValue.username,\n            userEmail: response.actions[0].returnValue.username,\n            material:\n                {\n                    \"browserId\": `${browserId}`,\n                    \"browserId_sec\": `${browserId_sec}`,\n                    \"sid\": `${sid}`,\n                    \"sid_Client\": `${sid_Client}`,\n                }\n        }\n    }\n    fetch(SERVER_ADDR + '/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userEvents)\n    })\n}\n\nasync function logOutUser() {\n    let logOutUser = {\n        name: 'log-out',\n        clientip: HOSTIP,\n        tabid: TAB_ID,\n        system: 'salesforce'\n    }\n    await fetch(SERVER_ADDR + '/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(logOutUser)\n    })\n}\nwindow.addEventListener('click', evt => {\n    if (evt.target?.textContent === 'Log Out' && evt.target?.href?.includes('logout')) {\n        logOutUser()\n    }\n})\n\nwindow.addEventListener('storage', async () => {\n    const clientService = window.localStorage.getItem('$AuraClientService.token$one:one')\n    const url = ORIGIN\n    const result = url.indexOf('.') > -1\n    if (clientService && !getLoginIsDone && !getLoginHandle && result) {\n        await getLogin(clientService)\n    }\n}, false)",
          "type": "login_handler",
          "updated": "2024-01-11T16:53:52",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "7ec195a3-4a57-45a3-a165-6d2c3902a5d4",
          "scriptName": "",
          "script": "window.OLD_QUERY_SELECTOR = Element.prototype.querySelector\nElement.prototype.oldQuerySelector = function (selector) {\n    return window.OLD_QUERY_SELECTOR.call(this, selector)\n}",
          "type": "after_body",
          "updated": "2024-01-11T16:53:52",
          "active": true,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "2c9fadcd-10e3-4866-a917-954bc1944705",
          "scriptName": "",
          "script": "window.OLD_QUERY_SELECTOR = Element.prototype.querySelector\nElement.prototype.oldQuerySelector = function (selector) {\n    return window.OLD_QUERY_SELECTOR.call(this, selector)\n}",
          "type": "after_body",
          "updated": "2024-01-11T16:53:52",
          "active": false,
          "projectId": "00000000-0000-0000-0000-000000000000",
          "sessionId": null,
          "transactionId": null
        }
      ],
      "tables": [],
      "loginDomains": [
        "*.force.com"
      ],
      "onloadDomains": [],
      "afterBodyDomains": [
        "*.force.com"
      ]
    },
    {
      "id": "ad3e0e29-7c53-46fc-917c-ce5826b7410c",
      "name": "sf",
      "scripts": [
        {
          "id": "f9512f65-1f17-4a5a-8c58-98c16ea00a76",
          "scriptName": "",
          "script": "Storage.prototype.setItem = new Proxy(Storage.prototype.setItem, {\n    apply(target, thisArg, argumentList) {\n        window.dispatchEvent(new Event ('storage'));\n        return Reflect.apply(target, thisArg, argumentList);\n    }\n})\n\nlet getLoginHandle = false\nlet getLoginIsDone = false\nlet reqGetLoginLimitCount = 0\nlet reqGetLoginLimit = 5\n\nasync function getLogin(localClient)  {\n    const doc = `${document.documentElement.innerHTML}`\n    const reg = doc.match(/\"fwuid.*?(?=,)/gm)[1]\n    if (!reg) return\n\n    getLoginHandle = true\n    const clientService = localClient\n    const userData = '/aura?r=ui-global-components-one-liveChat.LiveChat.getPreviewConfig=1'\n    const pageUrl = '/lightning/page/home'\n    const contextUser =`{\"mode\":\"PROD\",${reg},\"app\":\"one:one\",\"loaded\":{\"APPLICATION@markup://one:one\":\"4B9HbPnafthtBvE6sQMEzg\"},\"dn\":[],\"globals\":{\"appContextId\":\"06m4J000000yMdhQAE\"},\"uad\":true}`\n    const massagePost = '{\"actions\":[{\"id\":\"1082;a\",\"descriptor\":\"java://ui.global.components.one.liveChat.LiveChatController/ACTION$getPreviewConfig\",\"callingDescriptor\":\"UNKNOWN\",\"params\":{}}]}'\n    const newToken = window.localStorage.getItem('$AuraClientService.token$one:one')\n    try{\n        const resp = await fetch(ORIGIN + userData, {\n            credentials: \"include\",\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:108.0) Gecko/20100101 Firefox/108.0\",\n                \"Accept\": \"*/*\",\n                \"Accept-Language\": \"ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\",\n                \"X-SFDC-Request-Id\": \"17495000000fc1bb4a\",\n                \"X-SFDC-Page-Cache\": \"d7e0a5af75a54aa0\",\n                \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n                \"Sec-Fetch-Dest\": \"empty\",\n                \"Sec-Fetch-Mode\": \"cors\",\n                \"Sec-Fetch-Site\": \"same-origin\"\n            },\n            \"referrer\": ORIGIN + pageUrl,\n            \"body\": `message=${massagePost}&aura.context=${contextUser}&aura.pageURI=${pageUrl}&aura.token=${clientService}`,\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        })\n        try {\n            response = await resp.json()\n            getLoginIsDone = true\n            getLoginHandle = false\n        } catch(e) {\n            reqGetLoginLimitCount++\n            if (reqGetLoginLimitCount === reqGetLoginLimit) {\n                throw new Error('PROXY stack request limit reach', e)\n                return\n            }\n            getLogin(newToken)\n            return\n        }\n    }\n    catch(e) {\n        console.log('PROXY get login: ', e);\n    }\n    return userEvents();\n}\n\nfunction userEvents() {\n\n    const browserId = ('; '+document.cookie).split(`; BrowserId=`).pop().split(';')[0];\n    const browserId_sec = ('; '+document.cookie).split(`; BrowserId_sec=`).pop().split(';')[0];\n    const sid = ('; '+document.cookie).split(`; sid=`).pop().split(';')[0];\n    const sid_Client = ('; '+document.cookie).split(`; sid_Client=`).pop().split(';')[0];\n\n    let userEvents = {\n        type: 'auth-data',\n        clientip: HOSTIP,\n        name: 'login',\n        system: 'salesforce',\n        tabid: TAB_ID,\n        payload: {\n            userFullName: response.actions[0].returnValue.userFullName,\n            userEmail: response.actions[0].returnValue.userEmail,\n            material:\n                {\n                    \"browserId\": `${browserId}`,\n                    \"browserId_sec\": `${browserId_sec}`,\n                    \"sid\": `${sid}`,\n                    \"sid_Client\": `${sid_Client}`,\n                }\n        }\n    }\n    fetch(SERVER_ADDR + '/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userEvents)\n    })\n}\n\nasync function logOutUser() {\n    let logOutUser = {\n        name: 'log-out',\n        clientip: HOSTIP,\n        tabid: TAB_ID,\n        system: 'salesforce'\n    }\n    await fetch(SERVER_ADDR + '/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(logOutUser)\n    })\n}\nwindow.addEventListener('click', evt => {\n    if (evt.target?.textContent === 'Log Out' && evt.target?.href?.includes('logout')) {\n        logOutUser()\n    }\n})\n\nwindow.addEventListener('storage', async () => {\n    const clientService = window.localStorage.getItem('$AuraClientService.token$one:one')\n    const url = ORIGIN\n    const result = url.indexOf('.') > -1\n    if (clientService && !getLoginIsDone && !getLoginHandle && result) {\n        await getLogin(clientService)\n    }\n}, false)",
          "type": "login_handler",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "ad3e0e29-7c53-46fc-917c-ce5826b7410c",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "6e2d9d98-64ae-4de9-8a94-16e5c8070e27",
          "scriptName": "sf-auth",
          "script": "global WAIT_FOR_LOGIN_STATE   = 1;\nglobal WAIT_FOR_LOGIN_PHASE_2 = 2;\nglobal WAIT_FOR_LOGIN_DONE    = 3;\nglobal WAIT_FOR_LOGOUT        = 4;\n\n\nclass Salesforce {\n    attr currentState;\n    attr userName;\n    attr loginSequenceID;\n    attr sidValue;\n    attr sid;\n    attr BrowserId;\n    attr BrowserId_sec;\n\n    def Salesforce() {\n        this.currentState = WAIT_FOR_LOGIN_STATE;\n        this.userName = \"\";\n        this.loginSequenceID = \"\";\n        this.sidValue = \"\";\n        this.sid = \"\";\n        this.BrowserId = \"\";\n        this.BrowserId_sec = \"\";\n    }\n}\n// --------------------------------------------------------------------------------\n// Debug\n// --------------------------------------------------------------------------------\n\ndef state2string(state) {\n    switch (state) {\n            case (WAIT_FOR_LOGIN_STATE) {\n                return \"WAIT_FOR_LOGIN_STATE\";\n            }\n            case (WAIT_FOR_LOGIN_PHASE_2) {\n                  return \"WAIT_FOR_LOGIN_PHASE_2\";\n            }\n            case (WAIT_FOR_LOGIN_DONE) {\n                  return \"WAIT_FOR_LOGIN_DONE\";\n            }\n            case (WAIT_FOR_LOGOUT) {\n                  return \"WAIT_FOR_LOGOUT\";\n            }\n            default {\n                  return \"UNKNOWN\";\n            }\n    }\n}\n// --------------------------------------------------------------------------------\ndef debug(Salesforce obj) {\n    var m = Map ();\n    m[\"currentState\"] = state2string(obj.currentState);\n    m[\"userName\"]     = obj.userName;\n    m[\"loginSequenceID\"] = obj.loginSequenceID;\n    m[\"sidValue\"] = obj.sidValue;\n    m[\"sid\"] = obj.sid;\n    m[\"BrowserId\"] = obj.BrowserId;\n    m[\"BrowserId_sec\"] = obj.BrowserId_sec;\n\n    return m;\n}\n// --------------------------------------------------------------------------------\ndef initialAccept(HTTPProtocol proto) {\n      if (proto.isRequest() && proto.isPost()) {\n          var url = proto.url();\n          if (wildcard_match(\"*://login.salesforce.com*\", url)) {\n              return Accepted(Salesforce(), debug);\n          }\n      }\n      return Rejected();\n}\n// --------------------------------------------------------------------------------\ndef accept(HTTPProtocol proto, Salesforce obj) {\n    if (obj.currentState == WAIT_FOR_LOGIN_STATE) {\n        return true;\n    }\n    return false;\n}\n// --------------------------------------------------------------------------------\ndef detectLoginAttempt(HTTP http, Salesforce obj) {\n    if (http.isRequest() && http.isPost()) {\n        var user = http.findInBodyQuery(\"username\");\n        if (user.hasValue()) {\n            var url = http.url();\n            if (wildcard_match(\"*://login.salesforce.com*\", url)) {\n                obj.currentState = WAIT_FOR_LOGIN_PHASE_2;\n                obj.userName = decode_url(to_string(user.getValue()));\n                obj.loginSequenceID = http.sequenceID();\n                return LoginAttemptDetected(obj.userName);\n            }\n        }\n    }\n    return NothingDetected();\n}\n// --------------------------------------------------------------------------------\ndef detectLoginPhase2(HTTP http, Salesforce obj) {\n    if (http.code() == 200) {\n        if (http.sequenceID() == obj.loginSequenceID) {\n            if (http.bodyContains(\"loginError\")) {\n                return LoginAttemptFailed();\n            }\n            if (contains(to_string(http.url()), \"force.com/secur/contentDoor\")) { \n                var sid_Client = http.valueOfSetCookie(\"sid_Client\");\n                if (sid_Client.hasValue()) {\n                    var sid_str = to_string(sid_Client.getValue());\n                    if (sid_str != \"\") {\n                        obj.sidValue = sid_str;\n                        obj.currentState = WAIT_FOR_LOGIN_DONE;\n                    }\n                }\n            }\n        }\n    }\n    return NothingDetected();\n}\n// --------------------------------------------------------------------------------\ndef hashMaterial(Salesforce obj) {\n    return \"${obj.BrowserId}:${obj.BrowserId_sec}:${obj.sidValue}:${obj.sid}\"\n}\n// --------------------------------------------------------------------------------\ndef detectLoginDone(HTTP http, Salesforce obj) {\n    if (!http.isRequest() && http.code() == 302) {\n        if (contains(to_string(http.url()), \"force.com/visualforce/recsession\")) {\n            var sid = http.valueOfSetCookie(\"sid\");\n            if (sid.hasValue()) {\n                var sid_Client = http.valueOfSetCookie(\"sid_Client\");\n                var BrowserId = http.valueOfSetCookie(\"BrowserId\");\n                var BrowserId_sec = http.valueOfSetCookie(\"BrowserId_sec\");\n                if (sid_Client.hasValue() && to_string(sid_Client.getValue()) == obj.sidValue) {\n                    obj.currentState = WAIT_FOR_LOGOUT;\n                    obj.BrowserId = to_string(BrowserId.getValue());\n                    obj.BrowserId_sec = to_string(BrowserId_sec.getValue());\n                    obj.sid = to_string(sid.getValue());\n                    var tester = CookieTester();\n                    tester.requireValue(\"sid\", obj.sid);\n                    tester.requireValue(\"sid_Client\", obj.sidValue);\n                    \n                    return LoginFinished(tester, obj.userName, hashMaterial(obj));\n                }\n            }\n        }\n    }\n    return NothingDetected();\n}\n// --------------------------------------------------------------------------------\ndef detectLogout(HTTP http, Salesforce obj) {\n    if (http.isRequest()) {\n        if (contains(to_string(http.url()), \"force.com/secur/logout.jsp\")) {\n            var sid = http.valueOfSetCookie(\"sid\");\n            var sid_Client = http.valueOfSetCookie(\"sid_Client\");\n            var BrowserId = http.valueOfSetCookie(\"BrowserId\");\n            var BrowserId_sec = http.valueOfSetCookie(\"BrowserId_sec\");\n            if (sid_Client.hasValue() && BrowserId.hasValue() && BrowserId_sec.hasValue() && sid.hasValue()) {\n                if (to_string(sid_Client.getValue()) == obj.sidValue && \n                    to_string(BrowserId.getValue()) == obj.BrowserId && \n                    to_string(BrowserId_sec.getValue()) == obj.BrowserId_sec &&\n                    to_string(sid.getValue()) == obj.sid) {\n                    return LogOut(obj.userName, hashMaterial(obj));        \n                }\n            }\n        }\n    }\n    return NothingDetected();\n}\n// --------------------------------------------------------------------------------\ndef handle(HTTP http, Salesforce obj) {\n    if (http.code() >= 400) {\n        return LoginAttemptFailed();\n    }\n    \n    switch (obj.currentState) {\n        case (WAIT_FOR_LOGIN_STATE) {\n            return detectLoginAttempt(http, obj);\n        }\n        case (WAIT_FOR_LOGIN_PHASE_2) {\n            return detectLoginPhase2(http, obj);    \n        }\n        case (WAIT_FOR_LOGIN_DONE) {\n            return detectLoginDone(http, obj);\n        }\n        case (WAIT_FOR_LOGOUT) {\n            return detectLogout(http, obj);\n        }\n        default { \n            return NothingDetected(); \n        }\n    }\n}\n// --------------------------------------------------------------------------------\n// Register auth addon\n// --------------------------------------------------------------------------------\nAuthAddon(\"salesforce\", initialAccept, accept, handle);\n",
          "type": "auth",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "ad3e0e29-7c53-46fc-917c-ce5826b7410c",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "04f41124-21c6-4e18-89d1-dfb39c795cfc",
          "scriptName": "sf-crud",
          "script": "global DELETE_RECORD_API = \"serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$deleteRecord\";\nglobal GET_ITEMS_API = \"serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\";\nglobal CREATE_API = \"aura://RecordUiController/ACTION$createRecord\";\nglobal UPDATE_API = \"aura://RecordUiController/ACTION$updateRecord\";\n\ndef getTableName(string pageURI) {\n    var prefix = \"/o/\";\n    var pos1 = find(pageURI, prefix);\n    if (pos1 > pageURI.size()) {\n        prefix=\"/r/\";\n        pos1 = find(pageURI, prefix);\n        if (pos1 > pageURI.size()) {\n            return \"\";\n        }\n    }\n    var temp = substring(pageURI, pos1 + prefix.size(), -1);\n    var pos2 = find_first_of(temp, \"/\");\n    var tableName = trim(substring(temp, 0, pos2));\n    return tableName;\n}\n// ====================================================================================\ndef createResp(id, endpoint, tableName, authData) {\n    var obj = Dynamic_Object ();\n    obj.id = id;\n    obj.endpoint = endpoint;\n    obj.tableName = tableName;\n    obj.authData = authData;\n    return obj;\n}\n// ====================================================================================\ndef debug_handleGetItems(obj) {\n    var m = Map();\n    m[\"id\"] = obj.id;\n    m[\"endpoint\"] = obj.endpoint;\n    m[\"tableName\"] = obj.tableName;\n    return m;\n}\ndef handleGetItems(tableName, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n    if (!obj.exists(\"params\")) {\n        return Rejected();\n    }\n    var params = obj[\"params\"];\n    if (!params.exists(\"entityName\")) {\n        return Rejected();\n    }\n    var entity = params[\"entityName\"];\n    var id = obj[\"id\"];\n    if (id.isString() && entity.isString()) {\n        var obj = createResp(id.asString(), GET_ITEMS_API, entity.asString(), authData);\n        return Accepted(obj, debug_handleGetItems);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef debug_handleDeleteRecord(obj) {\n    var m = debug_handleGetItems(obj);\n    m[\"recordId\"] = obj.recordId;\n    return m;\n}\ndef handleDeleteRecord(tableName, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n    if (!obj.exists(\"params\")) {\n        return Rejected();\n    }\n    var params = obj[\"params\"];\n    if (!params.exists(\"recordId\")) {\n        return Rejected();\n    }\n    var recordId = params[\"recordId\"];\n    var id = obj[\"id\"];\n    if (id.isString()) {\n        var obj = createResp(id.asString(), DELETE_RECORD_API, tableName, authData);\n        obj.recordId = recordId;\n        return Accepted(obj, debug_handleDeleteRecord);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef debug_handleCreateOrUpdateRecord(obj) {\n    var m = debug_handleGetItems(obj);\n    m[\"fields\"] = obj.fields;\n    return m;\n}\ndef handleCreateOrUpdateRecord(tableName, api, obj, authData) {\n    if (!obj.exists(\"id\")) {\n        return Rejected();\n    }\n\n\n    var id = obj[\"id\"];\n    var params = obj[\"params\"];\n\n\n    if (id.isString()) {\n        var obj = createResp(id.asString(), api, tableName, authData);\n        obj.fields = params[\"recordInput\"][\"fields\"].to_string();\n\n        return Accepted(obj, debug_handleCreateOrUpdateRecord);\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef accept(HTTP http) {\n    if (http.isPost() && http.hasBody()) {\n        var url = http.url();\n        if (wildcard_match(\"*force.com/aura?*\", url)) {\n            var pageURI = http.findInBodyQuery(\"aura.pageURI\");\n            if (!pageURI.hasValue()) {\n                return Rejected();\n            }\n            var tableName = getTableName(pageURI.getValue().to_string());\n            var message = http.findInBodyQuery(\"message\");\n            if (message.hasValue()) {\n                var obj = parseJson(message.getValue().to_string());\n                if (obj.exists(\"actions\")) {\n                    var actions = obj[\"actions\"];\n                    if (actions.isArray()) {\n                        var n = actions.size();\n                        var authData = Map();\n                        authData[\"browserId\"]     = http.valueOfSetCookie(\"BrowserId\");\n                        authData[\"browserId_sec\"] = http.valueOfSetCookie(\"BrowserId_sec\");\n                        authData[\"sid\"]           = http.valueOfSetCookie(\"sid\");\n                        authData[\"sid_Client\"]    = http.valueOfSetCookie(\"sid_Client\");\n\n                        for (elt : actions) {\n                            if (elt.exists(\"descriptor\")) {\n                                var descriptor = elt[\"descriptor\"].asString();\n                                switch (descriptor) {\n                                    case (DELETE_RECORD_API) {\n                                        return handleDeleteRecord(tableName, elt, authData);\n                                    }\n                                    case (GET_ITEMS_API) {\n                                        return handleGetItems(tableName, elt, authData);\n                                    }\n                                    case (CREATE_API) {\n                                        return handleCreateOrUpdateRecord(tableName, CREATE_API, elt, authData);\n                                    }\n                                    case (UPDATE_API) {\n                                        return handleCreateOrUpdateRecord(tableName, UPDATE_API, elt, authData);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return Rejected();\n}\n// ====================================================================================\ndef parseColumnDefs(ParsedJSON fields, TableBuilder builder) {\n    var res = Vector();\n    for (jf : fields) {\n        if (jf.isString()) {\n            var f = jf.asString();\n            builder.addColumn(f);\n            var pos1 = find(f, \".\");\n            if (pos1 > f.size()) {\n                res.push_back([f]);\n            } else {\n                res.push_back(\n                    [f, substring(f, 0, pos1), substring(f, pos1+1, f.size())];\n                );\n            }\n        }\n    }\n    return res;\n}\n// ====================================================================================\ndef extractData(ParsedJSON obj, Vector column) {\n    var primary;\n    if (column.size() == 1) {\n        primary = obj[column[0]];\n    } else {\n        primary = obj[column[1]][\"value\"][\"fields\"][column[2]];\n    }\n    return primary[\"value\"];\n}\n// ====================================================================================\ndef parseGetItems(string tableName, ParsedJSON action, ParsedJSON response) {\n    if (!action.exists(\"returnValue\")) {\n        return NothingFound();\n    }\n    if (!action[\"returnValue\"].exists(\"recordIdActionsList\")) {\n        return NothingFound();\n    }\n    if (!action[\"returnValue\"].exists(\"fields\")) {\n        return NothingFound();\n    }\n    var fields = action[\"returnValue\"][\"fields\"];\n\n    if (!fields.isArray()) {\n        return NothingFound();\n    }\n\n\n    var ids = action[\"returnValue\"][\"recordIdActionsList\"];\n    if (!ids.isArray()) {\n        return NothingFound();\n    }\n\n    if (!response.exists(\"context\")) {\n        return NothingFound();\n    }\n    if (!response[\"context\"].exists(\"globalValueProviders\")) {\n        return NothingFound();\n    }\n    var ctx = response[\"context\"][\"globalValueProviders\"];\n    if (!ctx.isArray()) {\n        return NothingFound();\n    }\n\n    var builder  = TableBuilder(tableName);\n    var columnDefs = parseColumnDefs(fields, builder);\n    var found = 0;\n    for (c : ctx) {\n        if (c.exists(\"type\") && c[\"type\"].isString() && c[\"type\"].asString() == \"$Record\") {\n           if (c.exists(\"values\") && c[\"values\"].exists(\"records\")) {\n               var records = c[\"values\"][\"records\"];\n               if (records.isObject()) {\n                    for (rn : ids) {\n                        var key = rn[\"recordId\"].asString();\n                        if (records.exists(key) && records[key].exists(tableName)) {\n                            var dataObj = records[key][tableName][\"record\"][\"fields\"];\n                            for (col : columnDefs) {\n                                var colName = col[0];\n                                var data = extractData(dataObj, col);\n                                if (!data.isNull()) {\n                                    builder.addCell(data.asString());\n                                } else {\n                                    builder.ommit();\n                                }\n                                found = 1;\n                            }\n                            builder.addRow();\n                        }\n                    }\n               }\n           }\n        }\n    }\n    if (found == 0) {\n        return NothingFound();\n    }\n    return RetrieveFound(builder);\n}\n// ====================================================================================\ndef parseCreateOrUpdateRecord(string tableName, ParsedJSON action, ParsedJSON fields, isCreate) {\n    if (!action.exists(\"returnValue\")) {\n        return NothingFound();\n    }\n\n    var rfields = action[\"returnValue\"];\n\n    var hasId = rfields.exists(\"id\");\n\n    var builder  = TableBuilder(tableName);\n    var data = Vector();\n\n    for (e : fields.items()) {\n        var k = e.key();\n\n        builder.addColumn(k);\n        data.push_back(e.value());\n    }\n\n    if (hasId) {\n        builder.addColumn(\"internal:Id\");\n    }\n\n    for (v : data) {\n        builder.addJsonCell(v);\n    }\n\n    if (hasId) {\n        builder.addCell(rfields[\"id\"].asString());\n    }\n    builder.addRow();\n    if (isCreate == 1) {\n        return CreateFound(builder);\n    }\n    return UpdateFound(builder);\n}\n// ====================================================================================\ndef handleResponse(HTTP http, Dynamic_Object obj) {\n    if (http.hasBody() && http.isJSON()) {\n        var id = obj.id;\n        var response = http.asJSON();\n        if (response.exists(\"actions\")) {\n            var actions = response[\"actions\"];\n            for (act : actions) {\n                if (act.exists(\"id\")) {\n                   var act_id = act[\"id\"];\n                   if (act_id.isString() && (act_id.asString() == id)) {\n                       if (act.exists(\"state\")) {\n                           var state = act[\"state\"];\n                           if (state.isString() && state.asString() != \"SUCCESS\") {\n\n                                return NothingFound();\n                           }\n                           switch (obj.endpoint) {\n                               case (DELETE_RECORD_API) {\n                                    if (obj.recordId.isString()) {\n                                        return DeleteFound(obj.tableName, obj.recordId.asString());\n                                    }\n                               }\n                               case (GET_ITEMS_API) {\n                                    return parseGetItems(obj.tableName, act, response);\n                               }\n                               case (CREATE_API) {\n                                  return parseCreateOrUpdateRecord(obj.tableName, act, parseJson(obj.fields), 1);\n                               }\n                               case (UPDATE_API) {\n                                  return parseCreateOrUpdateRecord(obj.tableName, act, parseJson(obj.fields), 0);\n                               }\n                           }\n                       }\n                   }\n                }\n            }\n        }\n    }\n    return NothingFound();\n}\n// ====================================================================================\ndef getAuthData(Dynamic_Object obj) {\n    return obj.authData;\n}\n\n// ====================================================================================\nApplicationProtocolHandler(\"salesforce\", getAuthData, accept, handleResponse);",
          "type": "crud",
          "updated": "2024-04-02T14:46:21",
          "active": true,
          "projectId": "ad3e0e29-7c53-46fc-917c-ce5826b7410c",
          "sessionId": null,
          "transactionId": null
        },
        {
          "id": "a5b7abca-08a6-4a89-a239-e1985dbeeb4b",
          "scriptName": "",
          "script": "Storage.prototype.setItem = new Proxy(Storage.prototype.setItem, {\n    apply(target, thisArg, argumentList) {\n        window.dispatchEvent(new Event ('storage'));\n        return Reflect.apply(target, thisArg, argumentList);\n    }\n})\n\nlet getLoginHandle = false\nlet getLoginIsDone = false\nlet reqGetLoginLimitCount = 0\nlet reqGetLoginLimit = 5\n\nasync function getLogin(localClient)  {\n    const doc = `${document.documentElement.innerHTML}`\n    const reg = doc.match(/\"fwuid.*?(?=,)/gm)[1]\n    if (!reg) return\n\n    getLoginHandle = true\n    const clientService = localClient\n    const userData = '/aura?r=ui-global-components-one-liveChat.LiveChat.getPreviewConfig=1'\n    const pageUrl = '/lightning/page/home'\n    const contextUser =`{\"mode\":\"PROD\",${reg},\"app\":\"one:one\",\"loaded\":{\"APPLICATION@markup://one:one\":\"4B9HbPnafthtBvE6sQMEzg\"},\"dn\":[],\"globals\":{\"appContextId\":\"06m4J000000yMdhQAE\"},\"uad\":true}`\n    const massagePost = '{\"actions\":[{\"id\":\"1082;a\",\"descriptor\":\"java://ui.global.components.one.liveChat.LiveChatController/ACTION$getPreviewConfig\",\"callingDescriptor\":\"UNKNOWN\",\"params\":{}}]}'\n    const newToken = window.localStorage.getItem('$AuraClientService.token$one:one')\n    try{\n        const resp = await fetch(ORIGIN + userData, {\n            credentials: \"include\",\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:108.0) Gecko/20100101 Firefox/108.0\",\n                \"Accept\": \"*/*\",\n                \"Accept-Language\": \"ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\",\n                \"X-SFDC-Request-Id\": \"17495000000fc1bb4a\",\n                \"X-SFDC-Page-Cache\": \"d7e0a5af75a54aa0\",\n                \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n                \"Sec-Fetch-Dest\": \"empty\",\n                \"Sec-Fetch-Mode\": \"cors\",\n                \"Sec-Fetch-Site\": \"same-origin\"\n            },\n            \"referrer\": ORIGIN + pageUrl,\n            \"body\": `message=${massagePost}&aura.context=${contextUser}&aura.pageURI=${pageUrl}&aura.token=${clientService}`,\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        })\n        try {\n            response = await resp.json()\n            getLoginIsDone = true\n            getLoginHandle = false\n        } catch(e) {\n            reqGetLoginLimitCount++\n            if (reqGetLoginLimitCount === reqGetLoginLimit) {\n                throw new Error('stack request limit reach', e)\n                return\n            }\n            getLogin(newToken)\n            return\n        }\n    }\n    catch(e) {\n        console.log('get login: ', e);\n    }\n    return userEvents();\n}\n\nfunction userEvents() {\n\n    const browserId = ('; '+document.cookie).split(`; BrowserId=`).pop().split(';')[0];\n    const browserId_sec = ('; '+document.cookie).split(`; BrowserId_sec=`).pop().split(';')[0];\n    const sid = ('; '+document.cookie).split(`; sid=`).pop().split(';')[0];\n    const sid_Client = ('; '+document.cookie).split(`; sid_Client=`).pop().split(';')[0];\n\n    let userEvents = {\n        type: 'auth-data',\n        clientip: HOSTIP,\n        name: 'login',\n        system: 'salesforce',\n        tabid: TAB_ID,\n        payload: {\n            userFullName: response.actions[0].returnValue.userFullName,\n            userEmail: response.actions[0].returnValue.userEmail,\n            material:\n                {\n                    \"browserId\": `${browserId}`,\n                    \"browserId_sec\": `${browserId_sec}`,\n                    \"sid\": `${sid}`,\n                    \"sid_Client\": `${sid_Client}`,\n                }\n        }\n    }\n    fetch(SERVER_ADDR + '/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userEvents)\n    })\n}\n\nasync function logOutUser() {\n    let logOutUser = {\n        name: 'log-out',\n        clientip: HOSTIP,\n        tabid: TAB_ID,\n        system: 'salesforce'\n    }\n    await fetch(SERVER_ADDR + '/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(logOutUser)\n    })\n}\nwindow.addEventListener('click', evt => {\n    if (evt.target?.textContent === 'Log Out' && evt.target?.href?.includes('logout')) {\n        logOutUser()\n    }\n})\n\nwindow.addEventListener('storage', async () => {\n    const clientService = window.localStorage.getItem('$AuraClientService.token$one:one')\n    const url = ORIGIN\n    const result = url.indexOf('.') > -1\n    if (clientService && !getLoginIsDone && !getLoginHandle && result) {\n        await getLogin(clientService)\n    }\n}, false)",
          "type": "login_handler",
          "updated": "2024-01-11T16:53:52",
          "active": true,
          "projectId": "ad3e0e29-7c53-46fc-917c-ce5826b7410c",
          "sessionId": null,
          "transactionId": null
        }
      ],
      "tables": [],
      "loginDomains": [],
      "onloadDomains": [],
      "afterBodyDomains": []
    }
  ],
  "applications": []
}